version: '3.8'
services:

  #
  # The web host simply serves static content
  #
  webhost:
    image: webhost:1.0.0
    hostname: webhost
    ports:
      - 80:3000
    volumes:
      - ./webhost/config.json:/usr/webhost/config.json
      - ./spa/config.json:/usr/webhost/content/config.json
    environment:
      NODE_ENV: 'production'

  #
  # Deploy the example business API, which is a simple API that just validates JWTs
  # It runs on port 3002 inside the cluster at http://api.internal-example.com:3002
  # The SPA accesses it via the reverse proxy at http://api.example.com:3000/api
  #
  business-api:
    image: business-api:1.0.0
    hostname: api-${INTERNAL_DOMAIN}
    volumes:
      - ./api/config.json:/usr/api/config.json

  #
  # The Token Handler API (OAuth Agent) provided by Curity is hosted here, to perform the OAuth work
  # It runs on port 3001 inside the cluster at http://tokenhandler.internal-example.com:3001
  # The SPA accesses it via the reverse proxy at http://api.example.com:3000/tokenhandler
  #
  token-handler-api:
    image: token-handler-standard:1.0.0
    hostname: tokenhandler-${INTERNAL_DOMAIN}
    volumes:
      - ./token-handler-api/dist/config.js:/usr/bff-api/dist/config.js
    environment:
      PORT: 3001
      TRUSTED_WEB_ORIGIN: "http://${WEB_DOMAIN}"
      AUTHORIZE_ENDPOINT: "${IDSVR_BASE_URL}/oauth/v2/oauth-authorize"
      TOKEN_ENDPOINT: '${IDSVR_INTERNAL_BASE_URL}/oauth/v2/oauth-token'
      LOGOUT_ENDPOINT: '${IDSVR_BASE_URL}/oauth/v2/oauth-session/logout'
      CLIENT_ID: 'spa-client'
      REDIRECT_URI: 'http://${WEB_DOMAIN}/'
      POST_LOGOUT_REDIRECT_URI: 'http://${WEB_DOMAIN}/'
      SCOPE: 'openid profile'
      COOKIE_DOMAIN: '${API_DOMAIN}'
      COOKIE_NAME_PREFIX: 'example'
      COOKIE_ENCRYPTION_KEY: "${ENCRYPTION_KEY}"

  #
  # The Kong reverse proxy exposes API endpoints to the browser at http://api.example.com:3000
  #
  reverse-proxy:
    image: kong:2.6.0-alpine
    hostname: reverseproxy
    ports:
      - 3000:3000
    volumes:
      - ./reverse-proxy/kong.yml:/usr/local/kong/declarative/kong.yml
      - ./kong-phantom-token-plugin/plugin:/usr/local/share/lua/5.1/kong/plugins/phantom-token
      - ./oauth-proxy-plugin/plugin/plugin.lua:/usr/local/share/lua/5.1/kong/plugins/oauth-proxy/access.lua
      - ./oauth-proxy-plugin/plugin/handler.lua:/usr/local/share/lua/5.1/kong/plugins/oauth-proxy/handler.lua
      - ./oauth-proxy-plugin/plugin/schema.lua:/usr/local/share/lua/5.1/kong/plugins/oauth-proxy/schema.lua
      - ./oauth-proxy-plugin/plugin/kong-oauth-proxy-1.0.0-1.rockspec:/usr/local/share/lua/5.1/kong/plugins/oauth-proxy/oauth-proxy-1.0.0-1.rockspec
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: '/usr/local/kong/declarative/kong.yml'
      KONG_PROXY_LISTEN: '0.0.0.0:3000'
      KONG_LOG_LEVEL: 'info'
      KONG_PLUGINS: 'bundled,oauth-proxy,phantom-token'

  #
  # A SQL database used by the Curity Identity Server
  #
  curity-data:
    image: postgres:13.2
    hostname: dbserver
    profiles:
      - WITH_IDSVR
    volumes:
      - ./idsvr/data-backup.sql:/docker-entrypoint-initdb.d/data-backup.sql
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'Password1'
      POSTGRES_DB: 'idsvr'

  #
  # A standalone instance of the Curity Identity Server
  #
  curity-idsvr:
    image: curity.azurecr.io/curity/idsvr:6.7.0
    hostname: login-${INTERNAL_DOMAIN}
    ports:
      - 6749:6749
      - 8443:8443
    profiles:
      - WITH_IDSVR
    volumes:
      - ./idsvr/license.json:/opt/idsvr/etc/init/license/license.json
      - ./idsvr/config-backup.xml:/opt/idsvr/etc/init/config.xml
      - ./idsvr/log4j2.xml:/opt/idsvr/etc/log4j2.xml
    environment:
      PASSWORD: 'Password1'
      IDSVR_BASE_URL: "${IDSVR_BASE_URL}"
      WEB_DOMAIN: "${WEB_DOMAIN}"
